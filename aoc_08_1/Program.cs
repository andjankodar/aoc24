// See https://aka.ms/new-console-template for more information
using System.Collections.Generic;
using System.Data;

var testInput = """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
""";

var input = """
    .............C.7..................G..0...y........
    ..................7................C..............
    ....................................0......W....y.
    .......................................D..W.......
    ..........u.......................................
    ..................................4.......D0...j..
    .....................................D............
    ................O.....C................G..........
    ............F.....................C...............
    ......u..........F.................4.......y......
    ..........X..........5....4...........1...........
    ..........F...........5X...................3......
    .............F.............................j.3....
    .................u..............X.................
    ............................7.....................
    ..................................................
    ..........................5.....j2.........4......
    ....d.....................y...................j1..
    ..................................................
    ............................Y.e...................
    .................d...X...............J...........e
    .............d....................................
    ..............................Y..............1....
    .........................................Y........
    ......................W......8..f...J.........3...
    .......w.............J............................
    ...................................U.....f......e.
    .................................Of....e....t...1.
    .......g..........d......s........................
    ................G................f................
    .....................................O............
    ...g........................T.....U...............
    ......................s..........T.............G..
    ................................s.......8.........
    .....9........g...........o...U............E......
    ............g............................t....o...
    ...........................................6....E.
    .....................s......x........6....E.......
    ..........w.9................x............t.......
    ...........9........w...........J.....6o..........
    .............................................o....
    ..........S................U......................
    .......S..2..........c........T.O....t............
    .....2...S.....c...................T..............
    ..................x.......................8.......
    ....9.............................................
    ...wS.....................................6.......
    ................2........................8........
    ..................................................
    .................x....c........................E..
    """;

var grid = input.Split("\r\n").Select(x => x.Trim().ToArray()).ToArray();
var antennaDictionary = new Dictionary<char, List<(int row, int col)>>();

for (var i  = 0; i < grid.Length; i++)
{
    for (var j = 0; j < grid[i].Length; j++)
    {
        if(grid[i][j] == '.')
        {
            continue;
        }

        //if (j - 1 >= 0 && grid[i][j - 1] != '.' || j + 1 < grid[i].Length - 1 && grid[i][j + 1] != '.')
        //{
        //    continue;
        //}

        if (antennaDictionary.ContainsKey(grid[i][j]))
        {
            antennaDictionary[grid[i][j]].Add((i,j));
        }
        else
        {
            antennaDictionary.Add(grid[i][j], new List<(int row, int col)> { (i,j) });
        }
    }
}

Console.WriteLine($"There are {antennaDictionary.Keys.Count} different antennas");
var keys = antennaDictionary.Keys.ToArray();
var antinodes = new HashSet<(int row, int col)>();

for (var i = 0; i < keys.Length; i++)
{
    var locations = antennaDictionary[keys[i]].ToArray();

    if(locations.Length < 2 )
    {
        continue;
    }

    for (var j = 0; j < locations.Length -1; j++)
    {
        for (var k = j+1; k < locations.Length; k++)
        {
            var dr = locations[k].row - locations[j].row;
            var dc = locations[k].col - locations[j].col;
            var adr = Math.Abs(dr);
            var adc = Math.Abs(dc);

            if (dr < 0 && dc < 0) // j below k and j right of k
            {
                AddLocationIfValid(locations[k].row - adr, locations[k].col - adc);
                AddLocationIfValid(locations[j].row + adr, locations[j].col + adc);
            }
            else if (dr < 0 && dc > 0) // j below k and j left of k
            {
                AddLocationIfValid(locations[k].row - adr, locations[k].col + adc);
                AddLocationIfValid(locations[j].row + adr, locations[j].col - adc);
            }
            else if (dr > 0 && dc > 0) // j above k and j left of k
            {
                AddLocationIfValid(locations[k].row + adr, locations[k].col + adc);
                AddLocationIfValid(locations[j].row - adr, locations[j].col - adc);
            }
            else if (dr > 0 && dc < 0) // j above k and j right of k
            {
                AddLocationIfValid(locations[k].row + adr, locations[k].col - adc);
                AddLocationIfValid(locations[j].row - adr, locations[j].col + adc);
            }
            else
            {
                Console.WriteLine($"Error on line {i}");
            }
        }
    }
}

Console.WriteLine($"There are {antinodes.Count} antinodes");

bool AddLocationIfValid(int row, int col)
{
    if (row >= 0 && row < grid.Length && col >= 0 && col < grid[0].Length)
    {
        return !antinodes.Add((row, col));
    }

    return false;
}